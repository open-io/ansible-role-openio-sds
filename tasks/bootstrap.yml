---
- name: "Adapting to Puppet version"
  shell: "puppet --version|cut -c1"
  register: puppet_majorversion

- name: "Applying Puppet manifest for namespace {{ openio_namespace }}"
  command: "{{ openio_puppet4_apply if ( puppet_majorversion == '4' ) else openio_puppet3_apply }} {{ openio_puppet_manifest }}/{{ openio_namespace|lower }}.pp"
  register: puppet_result
  changed_when: puppet_result.rc == 2

- name: Check ZooKeeper status
  shell: "echo \"ls /hc/ns/{{ openio_namespace }}\" | {{ openio_zookeeper_cli_path }} -server {{ openio_zk_cluster_ip[0] }}:6005 2>/dev/null | grep -qe srv"
  register: openio_zk_status
  ignore_errors: yes
  when:
    - inventory_hostname == groups['openio_zk_cluster'][0]

- name: Wait for Zookeeper to be online
  shell: echo ruok | nc {{item}} 6005
  register: result
  until: result.stdout.find("imok") != -1
  retries: 10
  delay: 3
  with_items: "{{openio_zk_cluster_ip}}"

- name: "Bootstrapping ZooKeeper for namespace {{ openio_namespace }}"
  command: "{{ openio_zookeeper_bootstrap_cmd }} {{ openio_namespace }} {{ openio_zookeeper_bootstrap_options }}"
  when:
    - inventory_hostname == groups['openio_zk_cluster'][0]
      and openio_zk_status.rc != 0

- name: "Gather PIDs of meta0/meta1 services"
  shell: "{{ openio_gridinit_cmd }} status2 @meta0 @meta1 | grep {{openio_namespace}} | awk '{print $3}'"
  register: m0m1_pid

- name: "Restart meta0/meta1 services"
  shell: "{{ openio_gridinit_cmd }} restart $({{ openio_gridinit_cmd }} status @meta0 @meta1 |
          grep ' {{ openio_namespace }},' | awk '{print $1}')"

- name: "Check that meta0/meta1 have restarted"
  wait_for:
    path: "/proc/{{ item }}/status"
    state: absent
  with_items: "{{ m0m1_pid.stdout_lines }}"
  ignore_errors: yes
  register: m0m1_pid_killed
  timeout: 30

- name: "Kill remaining meta0/meta1"
  shell: "kill -9 {{ item }}"
  with_items: "{{ m0m1_pid_killed.results | select('failed') | map(attribute='item') | list }}"

- name: "Unlocking namespace {{ openio_namespace }}"
  command: "{{ openio_cli_path }} --oio-ns={{ openio_namespace }} cluster unlockall"
  when:
    - inventory_hostname == groups['openio_conscience'][0]

- name: "Waiting for {{  groups['openio_directory_m0'] | length }} meta0 and {{ groups['openio_directory_m1'] | length }}
         meta1 scores to increase"
  shell: "{{ openio_cli_path }} cluster list meta0 meta1 --oio-ns={{ openio_namespace }}
          -f value -c Score | grep -c '^0$' || true"
  register: metas_count
  until: "(metas_count.stdout | int) == 0"
  retries: 10
  delay: 1
  when:
    - inventory_hostname == groups['openio_conscience'][0]

- name: "Bootstrapping OpenIO namespace {{ openio_namespace }} with {{ openio_replicas }} replicas"
  command: "{{ openio_cli_path }} --oio-ns={{ openio_namespace }} directory bootstrap --replicas {{ openio_replicas }} --no-rdir"
  when:
    - inventory_hostname == groups['openio_conscience'][0]

- name: "Gather PIDs of meta0/meta1 services"
  shell: "{{ openio_gridinit_cmd }} status2 @meta0 @meta1 | grep {{openio_namespace}} | awk '{print $3}'"
  register: m0m1_pid

- name: "Restart meta0/meta1 services"
  shell: "{{ openio_gridinit_cmd }} restart $({{ openio_gridinit_cmd }} status @meta0 @meta1 |
          grep ' {{ openio_namespace }},' | awk '{print $1}')"

- name: "Check that meta0/meta1 have restarted"
  wait_for:
    path: "/proc/{{ item }}/status"
    state: absent
  with_items: "{{ m0m1_pid.stdout_lines }}"
  ignore_errors: yes
  register: m0m1_pid_killed
  timeout: 30

- name: "Kill remaining meta0/meta1"
  shell: "kill -9 {{ item }}"
  with_items: "{{ m0m1_pid_killed.results | select('failed') | map(attribute='item') | list }}"

- name: "Starting services for namespace {{ openio_namespace }}"
  command: "{{ openio_gridinit_cmd }} start @{{ openio_namespace}}"

- name: "Waiting for scores to increase"
  shell: "{{ openio_cli_path }} cluster list --oio-ns={{ openio_namespace }}
          -f value -c Score | grep -c '^0$' || true"
  register: unscored_count
  until: "(unscored_count.stdout | int) == 0"
  retries: 10
  delay: 1
  when:
    - inventory_hostname == groups['openio_conscience'][0]

- name: "Bootstrapping Reverse Directory for namespace {{ openio_namespace }}"
  command: "{{ openio_cli_path }} --oio-ns={{ openio_namespace }} volume admin bootstrap"
  when:
    - inventory_hostname == groups['openio_conscience'][0]
...
