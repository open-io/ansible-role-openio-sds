---

- name: "Adapting to Puppet version"
  shell: "puppet --version|cut -c1"
  register: puppet_majorversion

- name: "Applying Puppet manifest for namespace {{ openio_namespace }}"
  command: "{{ openio_puppet4_apply if ( puppet_majorversion.stdout == '4' ) else openio_puppet3_apply }} {% if openio_sds_puppet_apply_options is defined %}{{ openio_sds_puppet_apply_options }}{% endif %} {{ openio_puppet_manifest }}/{{ openio_namespace|lower }}.pp"
  register: puppet_result
  changed_when: puppet_result.rc == 2

- name: Bootstrap meta0 in ZK
  block:
    - name: Check ZooKeeper status
      shell: "echo 'ls /hc/ns/{{ openio_namespace }}' | {{ openio_zookeeper_cli_path }} -server {{ openio_zk_cluster_ip[0] }}:6005 2>/dev/null | grep -qe srv"
      register: openio_zk_status
      ignore_errors: true
      failed_when: false
      when: inventory_hostname == groups[openio_zk_inventory_group_name][0]

    - name: Wait for Zookeeper to be online
      shell: echo ruok | nc {{ item }} 6005
      register: result
      until: result.stdout.find("imok") != -1
      retries: 10
      delay: 3
      with_items: "{{ openio_zk_cluster_ip }}"
      when: inventory_hostname == groups[openio_zk_inventory_group_name][0]

    - name: "Bootstrapping ZooKeeper for namespace {{ openio_namespace }}"
      command: "{{ openio_zookeeper_bootstrap_cmd }} {{ openio_namespace }} {{ openio_zookeeper_bootstrap_options }}"
      when:
        - inventory_hostname == groups[openio_zk_inventory_group_name][0]
        - openio_zk_status.rc != 0
      register: zk_bootstrap
      until: zk_bootstrap.rc == 0
      retries: 3
      delay: 5
      ignore_errors: true
      failed_when: false

    - name: "Bootstrapping ZooKeeper for namespace {{ openio_namespace }} in slow mode"
      command: "{{ openio_zookeeper_bootstrap_cmd }} {{ openio_namespace }} {{ openio_zookeeper_bootstrap_options }} --slow"
      when:
        - inventory_hostname == groups[openio_zk_inventory_group_name][0]
        - openio_zk_status.rc != 0
        - zk_bootstrap.rc != 0

    - name: 'Restart meta0 & meta1'
      include_tasks: restart_m0m1.yml
  when: openio_zk_cluster_ip

- name: "Unlock scores on meta0/meta1 services"
  command: "{{ openio_cli_path }} cluster unlockall meta0 meta1 --oio-ns={{ openio_namespace }}"
  when: inventory_hostname == groups['openio_conscience'][0]

- name: "Wait for meta0/meta1 services"
  command: "{{ openio_cli_path }} cluster wait -d {{ openio_timeout_bootstrap_meta_0_1 }} meta0 meta1 --oio-ns={{ openio_namespace }} -s {{ openio_minimal_score_for_directory_bootstrap }}"
  when: inventory_hostname == groups['openio_conscience'][0]

- name: "Bootstrapping OpenIO namespace {{ openio_namespace }} with {{ openio_replicas }} replicas"
  command: "{{ openio_cli_path }} --oio-ns={{ openio_namespace }} directory bootstrap --replicas {{ openio_replicas }} --no-rdir"
  register: dir_bootstrap
  until: dir_bootstrap.rc == 0
  retries: 3
  delay: 5
  when: inventory_hostname == groups['openio_conscience'][0]

- name: 'Restart meta0 & meta1'
  include_tasks: restart_m0m1.yml

- name: "Starting services for namespace {{ openio_namespace }}"
  command: "{{ openio_gridinit_cmd }} start @{{ openio_namespace }}"

- name: "Unlock scores"
  command: "{{ openio_cli_path }} cluster unlockall --oio-ns={{ openio_namespace }}"
  when: inventory_hostname == groups['openio_conscience'][0]

- name: "Wait for services's scores get to a sensible point"
  command: "{{ openio_cli_path }} cluster wait -d {{ openio_timeout_sensible_score }} rawx rdir --oio-ns={{ openio_namespace }} -s {{ openio_minimal_score_for_volume_admin_bootstrap }}"
  when: inventory_hostname == groups['openio_conscience'][0]

- name: "Bootstrapping Reverse Directory for namespace {{ openio_namespace }}"
  command: "{{ openio_cli_path }} --oio-ns={{ openio_namespace }} volume admin bootstrap"
  when: inventory_hostname == groups['openio_conscience'][0]

...
