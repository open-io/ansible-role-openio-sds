---

- name: "Restart meta0 meta1: services infos"
  command: "{{ openio_gridinit_cmd }} status @meta0 @meta1"
  ignore_errors: true
  failed_when: false
  register: m0m1_svcs

- name: "Restart meta0 meta1: PIDs"
  shell: "echo '{{ m0m1_svcs.stdout }}' | awk '/ {{ openio_namespace }},/ {print $3}'"
  register: m0m1_pids

- name: "Restart meta0 meta1: services names"
  shell: "echo '{{ m0m1_svcs.stdout }}' | awk '/ {{ openio_namespace }},/ {print $1}'"
  register: m0m1_names

- name: "Restart meta0 meta1: restart services"
  command: "{{ openio_gridinit_cmd }} restart {{ m0m1_names.stdout }}"

- name: "Restart meta0 meta1: wait for processes to die"
  wait_for:
    path: "/proc/{{ pid }}/status"
    state: absent
    timeout: 30
  when: (pid | int) != -1
  with_items: "{{ m0m1_pids.stdout_lines }}"
  loop_control:
    loop_var: pid
  ignore_errors: true
  # Do not uncomment the following, as we're checking this with the `failed` filter
  # failed_when: false
  register: m0m1_pids_killed

- name: "Restart meta0 meta1: cleanup stray processes by force-killing"
  changed_when: true
  # The proc file test is in case the process finally disappeared
  shell: "kill -9 {{ item.pid }} || [ ! -f /proc/{{ item.pid }}/status ]"
  when:
    - (item.pid | int) != -1
    - (item.state is defined and item.state != 'absent') or
      (item.msg is defined and item.msg[:7] == 'Timeout')
  with_items: "{{ m0m1_pids_killed.results }}"

...
